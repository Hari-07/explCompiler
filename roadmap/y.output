Terminals unused in grammar

    START
    END
    ARR_INDEX


Grammar

    0 $accept: code $end

    1 code: declarations fdefblock program
    2     | declarations program
    3     | program

    4 declarations: DECL decllist ENDDECL
    5             | DECL ENDDECL

    6 decllist: decllist decl
    7         | decl

    8 decl: type varlist

    9 varlist: varlist ',' VAR
   10        | varlist ',' VAR '[' NUM ']'
   11        | varlist ',' VAR '(' paramlist ')'
   12        | VAR
   13        | VAR '[' NUM ']'
   14        | VAR '(' paramlist ')'

   15 fdefblock: fdefblock fdef
   16          | fdef

   17 $@1: %empty

   18 fdef: type VAR '(' paramlist ')' '{' ldeclarations $@1 fbody '}'

   19 fbody: slist

   20 paramlist: paramlist ',' param
   21          | param
   22          | %empty

   23 param: type VAR

   24 ldeclarations: DECL ldecllist ENDDECL
   25              | %empty

   26 ldecllist: ldecllist ldecl
   27          | ldecl

   28 ldecl: type lvarlist

   29 lvarlist: lvarlist ',' VAR
   30         | VAR

   31 type: INT
   32     | STR

   33 program: INT MAIN '(' ')' '{' ldeclarations slist '}'

   34 slist: slist stmt
   35      | stmt

   36 stmt: inputStmt
   37     | outputStmt
   38     | assgStmt
   39     | ifStmt
   40     | whileStmt
   41     | jmpStmts
   42     | fnCallStmts
   43     | returnStmt

   44 inputStmt: READ '(' expr ')'

   45 outputStmt: WRITE '(' expr ')'

   46 assgStmt: expr EQUALS expr

   47 ifStmt: IF '(' expr ')' THEN slist ELSE slist ENDIF
   48       | IF '(' expr ')' THEN slist ENDIF

   49 whileStmt: WHILE '(' expr ')' DO slist ENDWHILE
   50          | DO slist WHILE '(' expr ')' ENDWHILE
   51          | REPEAT slist UNTIL '(' expr ')'

   52 jmpStmts: CONTINUE
   53         | BREAK

   54 fnCallStmts: VAR '(' argList ')'

   55 returnStmt: RETURN expr

   56 expr: '(' expr ')'
   57     | expr ADD expr
   58     | expr SUB expr
   59     | expr MUL expr
   60     | expr DIV expr
   61     | expr SLT expr
   62     | expr SGT expr
   63     | expr LTE expr
   64     | expr GTE expr
   65     | expr NEQ expr
   66     | expr EQU expr
   67     | NUM
   68     | STRING
   69     | VAR '[' expr ']'
   70     | VAR ARGS '(' argList ')'
   71     | VAR

   72 argList: %empty
   73        | argList ',' expr
   74        | expr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 11 14 18 33 44 45 47 48 49 50 51 54 56 70
    ')' (41) 11 14 18 33 44 45 47 48 49 50 51 54 56 70
    ',' (44) 9 10 11 20 29 73
    '[' (91) 10 13 69
    ']' (93) 10 13 69
    '{' (123) 18 33
    '}' (125) 18 33
    error (256)
    START (258)
    END (259)
    DECL (260) 4 5 24
    ENDDECL (261) 4 5 24
    IF (262) 47 48
    THEN (263) 47 48
    ELSE (264) 47
    ENDIF (265) 47 48
    WHILE (266) 49 50
    DO (267) 49 50
    ENDWHILE (268) 49 50
    READ (269) 44
    WRITE (270) 45
    CONTINUE (271) 52
    BREAK (272) 53
    REPEAT (273) 51
    UNTIL (274) 51
    MAIN (275) 33
    ARGS (276) 70
    RETURN (277) 55
    INT (278) 31 33
    STR (279) 32
    NUM (280) 10 13 67
    VAR (281) 9 10 11 12 13 14 18 23 29 30 54 69 70 71
    ADD (282) 57
    SUB (283) 58
    MUL (284) 59
    DIV (285) 60
    EQUALS (286) 46
    SLT (287) 61
    SGT (288) 62
    LTE (289) 63
    GTE (290) 64
    NEQ (291) 65
    EQU (292) 66
    STRING (293) 68
    ARR_INDEX (294)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    code (48)
        on left: 1 2 3
        on right: 0
    declarations <node> (49)
        on left: 4 5
        on right: 1 2
    decllist <node> (50)
        on left: 6 7
        on right: 4 6
    decl <node> (51)
        on left: 8
        on right: 6 7
    varlist <d> (52)
        on left: 9 10 11 12 13 14
        on right: 8 9 10 11
    fdefblock (53)
        on left: 15 16
        on right: 1 15
    fdef <node> (54)
        on left: 18
        on right: 15 16
    $@1 (55)
        on left: 17
        on right: 18
    fbody <node> (56)
        on left: 19
        on right: 18
    paramlist <fparams> (57)
        on left: 20 21 22
        on right: 11 14 18 20
    param <fparams> (58)
        on left: 23
        on right: 20 21
    ldeclarations (59)
        on left: 24 25
        on right: 18 33
    ldecllist (60)
        on left: 26 27
        on right: 24 26
    ldecl (61)
        on left: 28
        on right: 26 27
    lvarlist (62)
        on left: 29 30
        on right: 28 29
    type <d> (63)
        on left: 31 32
        on right: 8 18 23 28
    program <node> (64)
        on left: 33
        on right: 1 2 3
    slist <node> (65)
        on left: 34 35
        on right: 19 33 34 47 48 49 50 51
    stmt <node> (66)
        on left: 36 37 38 39 40 41 42 43
        on right: 34 35
    inputStmt <node> (67)
        on left: 44
        on right: 36
    outputStmt <node> (68)
        on left: 45
        on right: 37
    assgStmt <node> (69)
        on left: 46
        on right: 38
    ifStmt <node> (70)
        on left: 47 48
        on right: 39
    whileStmt <node> (71)
        on left: 49 50 51
        on right: 40
    jmpStmts <node> (72)
        on left: 52 53
        on right: 41
    fnCallStmts <node> (73)
        on left: 54
        on right: 42
    returnStmt <node> (74)
        on left: 55
        on right: 43
    expr <node> (75)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
        on right: 44 45 46 47 48 49 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 73 74
    argList <node> (76)
        on left: 72 73 74
        on right: 54 70 73


State 0

    0 $accept: . code $end

    DECL  shift, and go to state 1
    INT   shift, and go to state 2

    code          go to state 3
    declarations  go to state 4
    program       go to state 5


State 1

    4 declarations: DECL . decllist ENDDECL
    5             | DECL . ENDDECL

    ENDDECL  shift, and go to state 6
    INT      shift, and go to state 7
    STR      shift, and go to state 8

    decllist  go to state 9
    decl      go to state 10
    type      go to state 11


State 2

   33 program: INT . MAIN '(' ')' '{' ldeclarations slist '}'

    MAIN  shift, and go to state 12


State 3

    0 $accept: code . $end

    $end  shift, and go to state 13


State 4

    1 code: declarations . fdefblock program
    2     | declarations . program

    INT  shift, and go to state 14
    STR  shift, and go to state 8

    fdefblock  go to state 15
    fdef       go to state 16
    type       go to state 17
    program    go to state 18


State 5

    3 code: program .

    $default  reduce using rule 3 (code)


State 6

    5 declarations: DECL ENDDECL .

    $default  reduce using rule 5 (declarations)


State 7

   31 type: INT .

    $default  reduce using rule 31 (type)


State 8

   32 type: STR .

    $default  reduce using rule 32 (type)


State 9

    4 declarations: DECL decllist . ENDDECL
    6 decllist: decllist . decl

    ENDDECL  shift, and go to state 19
    INT      shift, and go to state 7
    STR      shift, and go to state 8

    decl  go to state 20
    type  go to state 11


State 10

    7 decllist: decl .

    $default  reduce using rule 7 (decllist)


State 11

    8 decl: type . varlist

    VAR  shift, and go to state 21

    varlist  go to state 22


State 12

   33 program: INT MAIN . '(' ')' '{' ldeclarations slist '}'

    '('  shift, and go to state 23


State 13

    0 $accept: code $end .

    $default  accept


State 14

   31 type: INT .
   33 program: INT . MAIN '(' ')' '{' ldeclarations slist '}'

    MAIN  shift, and go to state 12

    $default  reduce using rule 31 (type)


State 15

    1 code: declarations fdefblock . program
   15 fdefblock: fdefblock . fdef

    INT  shift, and go to state 14
    STR  shift, and go to state 8

    fdef     go to state 24
    type     go to state 17
    program  go to state 25


State 16

   16 fdefblock: fdef .

    $default  reduce using rule 16 (fdefblock)


State 17

   18 fdef: type . VAR '(' paramlist ')' '{' ldeclarations $@1 fbody '}'

    VAR  shift, and go to state 26


State 18

    2 code: declarations program .

    $default  reduce using rule 2 (code)


State 19

    4 declarations: DECL decllist ENDDECL .

    $default  reduce using rule 4 (declarations)


State 20

    6 decllist: decllist decl .

    $default  reduce using rule 6 (decllist)


State 21

   12 varlist: VAR .
   13        | VAR . '[' NUM ']'
   14        | VAR . '(' paramlist ')'

    '['  shift, and go to state 27
    '('  shift, and go to state 28

    $default  reduce using rule 12 (varlist)


State 22

    8 decl: type varlist .
    9 varlist: varlist . ',' VAR
   10        | varlist . ',' VAR '[' NUM ']'
   11        | varlist . ',' VAR '(' paramlist ')'

    ','  shift, and go to state 29

    $default  reduce using rule 8 (decl)


State 23

   33 program: INT MAIN '(' . ')' '{' ldeclarations slist '}'

    ')'  shift, and go to state 30


State 24

   15 fdefblock: fdefblock fdef .

    $default  reduce using rule 15 (fdefblock)


State 25

    1 code: declarations fdefblock program .

    $default  reduce using rule 1 (code)


State 26

   18 fdef: type VAR . '(' paramlist ')' '{' ldeclarations $@1 fbody '}'

    '('  shift, and go to state 31


State 27

   13 varlist: VAR '[' . NUM ']'

    NUM  shift, and go to state 32


State 28

   14 varlist: VAR '(' . paramlist ')'

    INT  shift, and go to state 7
    STR  shift, and go to state 8

    $default  reduce using rule 22 (paramlist)

    paramlist  go to state 33
    param      go to state 34
    type       go to state 35


State 29

    9 varlist: varlist ',' . VAR
   10        | varlist ',' . VAR '[' NUM ']'
   11        | varlist ',' . VAR '(' paramlist ')'

    VAR  shift, and go to state 36


State 30

   33 program: INT MAIN '(' ')' . '{' ldeclarations slist '}'

    '{'  shift, and go to state 37


State 31

   18 fdef: type VAR '(' . paramlist ')' '{' ldeclarations $@1 fbody '}'

    INT  shift, and go to state 7
    STR  shift, and go to state 8

    $default  reduce using rule 22 (paramlist)

    paramlist  go to state 38
    param      go to state 34
    type       go to state 35


State 32

   13 varlist: VAR '[' NUM . ']'

    ']'  shift, and go to state 39


State 33

   14 varlist: VAR '(' paramlist . ')'
   20 paramlist: paramlist . ',' param

    ','  shift, and go to state 40
    ')'  shift, and go to state 41


State 34

   21 paramlist: param .

    $default  reduce using rule 21 (paramlist)


State 35

   23 param: type . VAR

    VAR  shift, and go to state 42


State 36

    9 varlist: varlist ',' VAR .
   10        | varlist ',' VAR . '[' NUM ']'
   11        | varlist ',' VAR . '(' paramlist ')'

    '['  shift, and go to state 43
    '('  shift, and go to state 44

    $default  reduce using rule 9 (varlist)


State 37

   33 program: INT MAIN '(' ')' '{' . ldeclarations slist '}'

    DECL  shift, and go to state 45

    $default  reduce using rule 25 (ldeclarations)

    ldeclarations  go to state 46


State 38

   18 fdef: type VAR '(' paramlist . ')' '{' ldeclarations $@1 fbody '}'
   20 paramlist: paramlist . ',' param

    ','  shift, and go to state 40
    ')'  shift, and go to state 47


State 39

   13 varlist: VAR '[' NUM ']' .

    $default  reduce using rule 13 (varlist)


State 40

   20 paramlist: paramlist ',' . param

    INT  shift, and go to state 7
    STR  shift, and go to state 8

    param  go to state 48
    type   go to state 35


State 41

   14 varlist: VAR '(' paramlist ')' .

    $default  reduce using rule 14 (varlist)


State 42

   23 param: type VAR .

    $default  reduce using rule 23 (param)


State 43

   10 varlist: varlist ',' VAR '[' . NUM ']'

    NUM  shift, and go to state 49


State 44

   11 varlist: varlist ',' VAR '(' . paramlist ')'

    INT  shift, and go to state 7
    STR  shift, and go to state 8

    $default  reduce using rule 22 (paramlist)

    paramlist  go to state 50
    param      go to state 34
    type       go to state 35


State 45

   24 ldeclarations: DECL . ldecllist ENDDECL

    INT  shift, and go to state 7
    STR  shift, and go to state 8

    ldecllist  go to state 51
    ldecl      go to state 52
    type       go to state 53


State 46

   33 program: INT MAIN '(' ')' '{' ldeclarations . slist '}'

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 67
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 47

   18 fdef: type VAR '(' paramlist ')' . '{' ldeclarations $@1 fbody '}'

    '{'  shift, and go to state 78


State 48

   20 paramlist: paramlist ',' param .

    $default  reduce using rule 20 (paramlist)


State 49

   10 varlist: varlist ',' VAR '[' NUM . ']'

    ']'  shift, and go to state 79


State 50

   11 varlist: varlist ',' VAR '(' paramlist . ')'
   20 paramlist: paramlist . ',' param

    ','  shift, and go to state 40
    ')'  shift, and go to state 80


State 51

   24 ldeclarations: DECL ldecllist . ENDDECL
   26 ldecllist: ldecllist . ldecl

    ENDDECL  shift, and go to state 81
    INT      shift, and go to state 7
    STR      shift, and go to state 8

    ldecl  go to state 82
    type   go to state 53


State 52

   27 ldecllist: ldecl .

    $default  reduce using rule 27 (ldecllist)


State 53

   28 ldecl: type . lvarlist

    VAR  shift, and go to state 83

    lvarlist  go to state 84


State 54

   47 ifStmt: IF . '(' expr ')' THEN slist ELSE slist ENDIF
   48       | IF . '(' expr ')' THEN slist ENDIF

    '('  shift, and go to state 85


State 55

   49 whileStmt: WHILE . '(' expr ')' DO slist ENDWHILE

    '('  shift, and go to state 86


State 56

   50 whileStmt: DO . slist WHILE '(' expr ')' ENDWHILE

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 87
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 57

   44 inputStmt: READ . '(' expr ')'

    '('  shift, and go to state 88


State 58

   45 outputStmt: WRITE . '(' expr ')'

    '('  shift, and go to state 89


State 59

   52 jmpStmts: CONTINUE .

    $default  reduce using rule 52 (jmpStmts)


State 60

   53 jmpStmts: BREAK .

    $default  reduce using rule 53 (jmpStmts)


State 61

   51 whileStmt: REPEAT . slist UNTIL '(' expr ')'

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 90
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 62

   55 returnStmt: RETURN . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 92


State 63

   67 expr: NUM .

    $default  reduce using rule 67 (expr)


State 64

   54 fnCallStmts: VAR . '(' argList ')'
   69 expr: VAR . '[' expr ']'
   70     | VAR . ARGS '(' argList ')'
   71     | VAR .

    ARGS  shift, and go to state 93
    '['   shift, and go to state 94
    '('   shift, and go to state 95

    $default  reduce using rule 71 (expr)


State 65

   68 expr: STRING .

    $default  reduce using rule 68 (expr)


State 66

   56 expr: '(' . expr ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 96


State 67

   33 program: INT MAIN '(' ')' '{' ldeclarations slist . '}'
   34 slist: slist . stmt

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66
    '}'       shift, and go to state 97

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 68

   35 slist: stmt .

    $default  reduce using rule 35 (slist)


State 69

   36 stmt: inputStmt .

    $default  reduce using rule 36 (stmt)


State 70

   37 stmt: outputStmt .

    $default  reduce using rule 37 (stmt)


State 71

   38 stmt: assgStmt .

    $default  reduce using rule 38 (stmt)


State 72

   39 stmt: ifStmt .

    $default  reduce using rule 39 (stmt)


State 73

   40 stmt: whileStmt .

    $default  reduce using rule 40 (stmt)


State 74

   41 stmt: jmpStmts .

    $default  reduce using rule 41 (stmt)


State 75

   42 stmt: fnCallStmts .

    $default  reduce using rule 42 (stmt)


State 76

   43 stmt: returnStmt .

    $default  reduce using rule 43 (stmt)


State 77

   46 assgStmt: expr . EQUALS expr
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD     shift, and go to state 99
    SUB     shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    EQUALS  shift, and go to state 103
    SLT     shift, and go to state 104
    SGT     shift, and go to state 105
    LTE     shift, and go to state 106
    GTE     shift, and go to state 107
    NEQ     shift, and go to state 108
    EQU     shift, and go to state 109


State 78

   18 fdef: type VAR '(' paramlist ')' '{' . ldeclarations $@1 fbody '}'

    DECL  shift, and go to state 45

    $default  reduce using rule 25 (ldeclarations)

    ldeclarations  go to state 110


State 79

   10 varlist: varlist ',' VAR '[' NUM ']' .

    $default  reduce using rule 10 (varlist)


State 80

   11 varlist: varlist ',' VAR '(' paramlist ')' .

    $default  reduce using rule 11 (varlist)


State 81

   24 ldeclarations: DECL ldecllist ENDDECL .

    $default  reduce using rule 24 (ldeclarations)


State 82

   26 ldecllist: ldecllist ldecl .

    $default  reduce using rule 26 (ldecllist)


State 83

   30 lvarlist: VAR .

    $default  reduce using rule 30 (lvarlist)


State 84

   28 ldecl: type lvarlist .
   29 lvarlist: lvarlist . ',' VAR

    ','  shift, and go to state 111

    $default  reduce using rule 28 (ldecl)


State 85

   47 ifStmt: IF '(' . expr ')' THEN slist ELSE slist ENDIF
   48       | IF '(' . expr ')' THEN slist ENDIF

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 112


State 86

   49 whileStmt: WHILE '(' . expr ')' DO slist ENDWHILE

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 113


State 87

   34 slist: slist . stmt
   50 whileStmt: DO slist . WHILE '(' expr ')' ENDWHILE

    IF        shift, and go to state 54
    WHILE     shift, and go to state 114
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 88

   44 inputStmt: READ '(' . expr ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 115


State 89

   45 outputStmt: WRITE '(' . expr ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 116


State 90

   34 slist: slist . stmt
   51 whileStmt: REPEAT slist . UNTIL '(' expr ')'

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    UNTIL     shift, and go to state 117
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 91

   69 expr: VAR . '[' expr ']'
   70     | VAR . ARGS '(' argList ')'
   71     | VAR .

    ARGS  shift, and go to state 93
    '['   shift, and go to state 94

    $default  reduce using rule 71 (expr)


State 92

   55 returnStmt: RETURN expr .
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109

    $default  reduce using rule 55 (returnStmt)


State 93

   70 expr: VAR ARGS . '(' argList ')'

    '('  shift, and go to state 118


State 94

   69 expr: VAR '[' . expr ']'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 119


State 95

   54 fnCallStmts: VAR '(' . argList ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    $default  reduce using rule 72 (argList)

    expr     go to state 120
    argList  go to state 121


State 96

   56 expr: '(' expr . ')'
   57     | expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 122


State 97

   33 program: INT MAIN '(' ')' '{' ldeclarations slist '}' .

    $default  reduce using rule 33 (program)


State 98

   34 slist: slist stmt .

    $default  reduce using rule 34 (slist)


State 99

   57 expr: expr ADD . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 123


State 100

   58 expr: expr SUB . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 124


State 101

   59 expr: expr MUL . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 125


State 102

   60 expr: expr DIV . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 126


State 103

   46 assgStmt: expr EQUALS . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 127


State 104

   61 expr: expr SLT . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 128


State 105

   62 expr: expr SGT . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 129


State 106

   63 expr: expr LTE . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 130


State 107

   64 expr: expr GTE . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 131


State 108

   65 expr: expr NEQ . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 132


State 109

   66 expr: expr EQU . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 133


State 110

   18 fdef: type VAR '(' paramlist ')' '{' ldeclarations . $@1 fbody '}'

    $default  reduce using rule 17 ($@1)

    $@1  go to state 134


State 111

   29 lvarlist: lvarlist ',' . VAR

    VAR  shift, and go to state 135


State 112

   47 ifStmt: IF '(' expr . ')' THEN slist ELSE slist ENDIF
   48       | IF '(' expr . ')' THEN slist ENDIF
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 136


State 113

   49 whileStmt: WHILE '(' expr . ')' DO slist ENDWHILE
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 137


State 114

   49 whileStmt: WHILE . '(' expr ')' DO slist ENDWHILE
   50          | DO slist WHILE . '(' expr ')' ENDWHILE

    '('  shift, and go to state 138


State 115

   44 inputStmt: READ '(' expr . ')'
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 139


State 116

   45 outputStmt: WRITE '(' expr . ')'
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 140


State 117

   51 whileStmt: REPEAT slist UNTIL . '(' expr ')'

    '('  shift, and go to state 141


State 118

   70 expr: VAR ARGS '(' . argList ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    $default  reduce using rule 72 (argList)

    expr     go to state 120
    argList  go to state 142


State 119

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr
   69     | VAR '[' expr . ']'

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ']'  shift, and go to state 143


State 120

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr
   74 argList: expr .

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109

    $default  reduce using rule 74 (argList)


State 121

   54 fnCallStmts: VAR '(' argList . ')'
   73 argList: argList . ',' expr

    ','  shift, and go to state 144
    ')'  shift, and go to state 145


State 122

   56 expr: '(' expr ')' .

    $default  reduce using rule 56 (expr)


State 123

   57 expr: expr . ADD expr
   57     | expr ADD expr .
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    $default  reduce using rule 57 (expr)


State 124

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   58     | expr SUB expr .
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    $default  reduce using rule 58 (expr)


State 125

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   59     | expr MUL expr .
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    $default  reduce using rule 59 (expr)


State 126

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   60     | expr DIV expr .
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    $default  reduce using rule 60 (expr)


State 127

   46 assgStmt: expr EQUALS expr .
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109

    $default  reduce using rule 46 (assgStmt)


State 128

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   61     | expr SLT expr .
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 61 (expr)


State 129

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   62     | expr SGT expr .
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 62 (expr)


State 130

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   63     | expr LTE expr .
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 63 (expr)


State 131

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   64     | expr GTE expr .
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 64 (expr)


State 132

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   65     | expr NEQ expr .
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 65 (expr)


State 133

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr
   66     | expr EQU expr .

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102

    SLT  error (nonassociative)
    SGT  error (nonassociative)
    LTE  error (nonassociative)
    GTE  error (nonassociative)
    NEQ  error (nonassociative)
    EQU  error (nonassociative)

    $default  reduce using rule 66 (expr)


State 134

   18 fdef: type VAR '(' paramlist ')' '{' ldeclarations $@1 . fbody '}'

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    fbody        go to state 146
    slist        go to state 147
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 135

   29 lvarlist: lvarlist ',' VAR .

    $default  reduce using rule 29 (lvarlist)


State 136

   47 ifStmt: IF '(' expr ')' . THEN slist ELSE slist ENDIF
   48       | IF '(' expr ')' . THEN slist ENDIF

    THEN  shift, and go to state 148


State 137

   49 whileStmt: WHILE '(' expr ')' . DO slist ENDWHILE

    DO  shift, and go to state 149


State 138

   49 whileStmt: WHILE '(' . expr ')' DO slist ENDWHILE
   50          | DO slist WHILE '(' . expr ')' ENDWHILE

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 150


State 139

   44 inputStmt: READ '(' expr ')' .

    $default  reduce using rule 44 (inputStmt)


State 140

   45 outputStmt: WRITE '(' expr ')' .

    $default  reduce using rule 45 (outputStmt)


State 141

   51 whileStmt: REPEAT slist UNTIL '(' . expr ')'

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 151


State 142

   70 expr: VAR ARGS '(' argList . ')'
   73 argList: argList . ',' expr

    ','  shift, and go to state 144
    ')'  shift, and go to state 152


State 143

   69 expr: VAR '[' expr ']' .

    $default  reduce using rule 69 (expr)


State 144

   73 argList: argList ',' . expr

    NUM     shift, and go to state 63
    VAR     shift, and go to state 91
    STRING  shift, and go to state 65
    '('     shift, and go to state 66

    expr  go to state 153


State 145

   54 fnCallStmts: VAR '(' argList ')' .

    $default  reduce using rule 54 (fnCallStmts)


State 146

   18 fdef: type VAR '(' paramlist ')' '{' ldeclarations $@1 fbody . '}'

    '}'  shift, and go to state 154


State 147

   19 fbody: slist .
   34 slist: slist . stmt

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    $default  reduce using rule 19 (fbody)

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 148

   47 ifStmt: IF '(' expr ')' THEN . slist ELSE slist ENDIF
   48       | IF '(' expr ')' THEN . slist ENDIF

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 155
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 149

   49 whileStmt: WHILE '(' expr ')' DO . slist ENDWHILE

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 156
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 150

   49 whileStmt: WHILE '(' expr . ')' DO slist ENDWHILE
   50          | DO slist WHILE '(' expr . ')' ENDWHILE
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 157


State 151

   51 whileStmt: REPEAT slist UNTIL '(' expr . ')'
   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109
    ')'  shift, and go to state 158


State 152

   70 expr: VAR ARGS '(' argList ')' .

    $default  reduce using rule 70 (expr)


State 153

   57 expr: expr . ADD expr
   58     | expr . SUB expr
   59     | expr . MUL expr
   60     | expr . DIV expr
   61     | expr . SLT expr
   62     | expr . SGT expr
   63     | expr . LTE expr
   64     | expr . GTE expr
   65     | expr . NEQ expr
   66     | expr . EQU expr
   73 argList: argList ',' expr .

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100
    MUL  shift, and go to state 101
    DIV  shift, and go to state 102
    SLT  shift, and go to state 104
    SGT  shift, and go to state 105
    LTE  shift, and go to state 106
    GTE  shift, and go to state 107
    NEQ  shift, and go to state 108
    EQU  shift, and go to state 109

    $default  reduce using rule 73 (argList)


State 154

   18 fdef: type VAR '(' paramlist ')' '{' ldeclarations $@1 fbody '}' .

    $default  reduce using rule 18 (fdef)


State 155

   34 slist: slist . stmt
   47 ifStmt: IF '(' expr ')' THEN slist . ELSE slist ENDIF
   48       | IF '(' expr ')' THEN slist . ENDIF

    IF        shift, and go to state 54
    ELSE      shift, and go to state 159
    ENDIF     shift, and go to state 160
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 156

   34 slist: slist . stmt
   49 whileStmt: WHILE '(' expr ')' DO slist . ENDWHILE

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    ENDWHILE  shift, and go to state 161
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 157

   49 whileStmt: WHILE '(' expr ')' . DO slist ENDWHILE
   50          | DO slist WHILE '(' expr ')' . ENDWHILE

    DO        shift, and go to state 149
    ENDWHILE  shift, and go to state 162


State 158

   51 whileStmt: REPEAT slist UNTIL '(' expr ')' .

    $default  reduce using rule 51 (whileStmt)


State 159

   47 ifStmt: IF '(' expr ')' THEN slist ELSE . slist ENDIF

    IF        shift, and go to state 54
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    slist        go to state 163
    stmt         go to state 68
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 160

   48 ifStmt: IF '(' expr ')' THEN slist ENDIF .

    $default  reduce using rule 48 (ifStmt)


State 161

   49 whileStmt: WHILE '(' expr ')' DO slist ENDWHILE .

    $default  reduce using rule 49 (whileStmt)


State 162

   50 whileStmt: DO slist WHILE '(' expr ')' ENDWHILE .

    $default  reduce using rule 50 (whileStmt)


State 163

   34 slist: slist . stmt
   47 ifStmt: IF '(' expr ')' THEN slist ELSE slist . ENDIF

    IF        shift, and go to state 54
    ENDIF     shift, and go to state 164
    WHILE     shift, and go to state 55
    DO        shift, and go to state 56
    READ      shift, and go to state 57
    WRITE     shift, and go to state 58
    CONTINUE  shift, and go to state 59
    BREAK     shift, and go to state 60
    REPEAT    shift, and go to state 61
    RETURN    shift, and go to state 62
    NUM       shift, and go to state 63
    VAR       shift, and go to state 64
    STRING    shift, and go to state 65
    '('       shift, and go to state 66

    stmt         go to state 98
    inputStmt    go to state 69
    outputStmt   go to state 70
    assgStmt     go to state 71
    ifStmt       go to state 72
    whileStmt    go to state 73
    jmpStmts     go to state 74
    fnCallStmts  go to state 75
    returnStmt   go to state 76
    expr         go to state 77


State 164

   47 ifStmt: IF '(' expr ')' THEN slist ELSE slist ENDIF .

    $default  reduce using rule 47 (ifStmt)
